{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import lxml.etree as ET\n",
    "import pandas as pd\n",
    "import os\n",
    "pd.set_option('display.float_format', lambda x: '%.2f' % x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# set directories\n",
    "RAW = os.path.join(\"..\",\"data\", \"raw\")\n",
    "INTERMEDIATE = os.path.join(\"..\",\"data\", \"intermediate\")\n",
    "FINAL = os.path.join(\"..\",\"data\", \"final\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Getting and Merging the files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['../data/raw/status_2-3.xml', '../data/raw/status_4.xml']\n"
     ]
    }
   ],
   "source": [
    "# Show IATI files available\n",
    "file_names = [os.path.join(RAW,name) for name in os.listdir(RAW) if name.endswith(\".xml\")]\n",
    "print(file_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Combining 2 IATI files\n",
      "Files Merged: \n",
      "|--> ../data/raw/status_2-3.xml\t\t:\t1172\n",
      "|--> ../data/raw/status_4.xml\t\t:\t2718\n",
      "|----> total\t\t\t\t:\t3890\n"
     ]
    }
   ],
   "source": [
    "# This cell takes all of the XML IATI files in the 'raw' directory and merges them into one file\n",
    "\n",
    "print(\"Combining {} IATI files\".format(len(file_names)))\n",
    "\n",
    "big_iati = ET.parse(file_names[0]).getroot()\n",
    "\n",
    "merge_log = {file_names[0]: len(big_iati.getchildren())}\n",
    "\n",
    "for xml_file in file_names[1:]:\n",
    "    data = ET.parse(xml_file).getroot()\n",
    "    merge_log[xml_file] = len(data.getchildren())\n",
    "    big_iati.extend(data.getchildren())\n",
    "\n",
    "print(\"Files Merged: \")\n",
    "\n",
    "for file, activity_count in merge_log.items():\n",
    "    print(\"|--> {}\\t\\t:\\t{}\".format(file, activity_count))\n",
    "\n",
    "print(\"|----> {}\\t\\t:\\t{}\".format(\"total\\t\\t\", len(big_iati.getchildren())))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open(os.path.join(INTERMEDIATE,\"combined.xml\"), \"wb\") as out_file:\n",
    "          out_file.write(et.tostring(big_iati, encoding='utf8', pretty_print=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Flattening"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-87e8f7b5ad9e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m transaction_df = pd.DataFrame(\n\u001b[0m\u001b[1;32m      2\u001b[0m     columns=[\n\u001b[1;32m      3\u001b[0m         \u001b[0;34m'iati-identifier'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0;34m'activity-status'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;34m'recipient-countries'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"
     ]
    }
   ],
   "source": [
    "transaction_df = pd.DataFrame(\n",
    "    columns=[\n",
    "        'iati-identifier', \n",
    "        'activity-status', \n",
    "        'recipient-countries',\n",
    "        'recipient-regions',\n",
    "        'ref',\n",
    "        'humanitarian',\n",
    "        'transaction-type',\n",
    "        'transaction-date',\n",
    "        'value',\n",
    "        'receiver-org'\n",
    "    ],\n",
    "    data=[[\n",
    "        transaction.getparent().find('iati-identifier').text,\n",
    "        transaction.getparent().find('activity-status').get('code'), [{\n",
    "            country.get('code'):\n",
    "            country.get('percentage')\n",
    "        } for country in transaction.getparent().findall('recipient-country')],\n",
    "        [{\n",
    "            region.get('code'): region.get('percentage')\n",
    "        } for region in transaction.getparent().findall('recipient-region')],\n",
    "        transaction.get('ref'),\n",
    "        transaction.get('humanitarian'),\n",
    "        transaction.find('transaction-type').get('code'),\n",
    "        transaction.find('transaction-date').get('iso-date'),\n",
    "        float(transaction.find('value').text),\n",
    "        transaction.find('receiver-org').get('ref')\n",
    "        if transaction.find('receiver-org') is not None else None\n",
    "    ] for transaction in big_iati.findall('iati-activity/transaction')])\n",
    "\n",
    "#transaction_df.pivot_table(index=['activity-status', 'transaction-type'], values='value').stack()\n",
    "transaction_df.drop(\n",
    "    ['recipient-regions', 'recipient-countries'], axis=1).describe(\n",
    "        include='all').transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "writer = pd.ExcelWriter(os.path.join(FINAL, 'canada_workbook.xlsx'), engine='xlsxwriter')\n",
    "\n",
    "transaction_df.to_excel(writer, sheet_name='transactions')\n",
    "\n",
    "writer.save()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "toc_cell": false,
   "toc_position": {
    "height": "619px",
    "left": "0px",
    "right": "1251.34px",
    "top": "107px",
    "width": "212px"
   },
   "toc_section_display": "block",
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
